'use client';

import React, { useState } from 'react';
import { Input } from '@/components/ui/Input';
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Search, Filter, X, Calendar, Building2, Shield } from 'lucide-react';

interface SearchFilters {
  query: string;
  vendor: string;
  product: string;
  ransomware_only: boolean;
  date_from: string;
  date_to: string;
}

interface SearchAndFiltersProps {
  onSearch: (filters: SearchFilters) => void;
  onReset: () => void;
  loading?: boolean;
}

export default function SearchAndFilters({ 
  onSearch, 
  onReset, 
  loading = false 
}: SearchAndFiltersProps) {
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState<SearchFilters>({
    query: '',
    vendor: '',
    product: '',
    ransomware_only: false,
    date_from: '',
    date_to: ''
  });

  const handleInputChange = (key: keyof SearchFilters, value: string | boolean) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(filters);
  };

  const handleReset = () => {
    const resetFilters = {
      query: '',
      vendor: '',
      product: '',
      ransomware_only: false,
      date_from: '',
      date_to: ''
    };
    setFilters(resetFilters);
    onReset();
  };

  const hasActiveFilters = filters.vendor || filters.product || filters.ransomware_only || filters.date_from || filters.date_to;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Search className="w-5 h-5" />
            검색 및 필터
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowFilters(!showFilters)}
          >
            <Filter className="w-4 h-4 mr-2" />
            고급 필터 {showFilters ? '숨기기' : '보기'}
          </Button>
        </CardTitle>
      </CardHeader>

      <CardContent>
        <form onSubmit={handleSearch} className="space-y-4">
          {/* 기본 검색 */}
          <div className="flex gap-2">
            <div className="flex-1">
              <Input
                type="text"
                placeholder="CVE ID, 취약점명, 설명으로 검색..."
                value={filters.query}
                onChange={(e) => handleInputChange('query', e.target.value)}
                className="w-full"
              />
            </div>
            <Button type="submit" disabled={loading}>
              <Search className="w-4 h-4 mr-2" />
              검색
            </Button>
            {(filters.query || hasActiveFilters) && (
              <Button 
                type="button" 
                variant="outline" 
                onClick={handleReset}
                disabled={loading}
              >
                <X className="w-4 h-4 mr-2" />
                초기화
              </Button>
            )}
          </div>

          {/* 고급 필터 */}
          {showFilters && (
            <div className="space-y-4 pt-4 border-t">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="flex items-center gap-2 text-sm font-medium mb-2">
                    <Building2 className="w-4 h-4" />
                    벤더
                  </label>
                  <Input
                    type="text"
                    placeholder="예: Microsoft, Adobe"
                    value={filters.vendor}
                    onChange={(e) => handleInputChange('vendor', e.target.value)}
                  />
                </div>
                <div>
                  <label className="flex items-center gap-2 text-sm font-medium mb-2">
                    <Shield className="w-4 h-4" />
                    제품
                  </label>
                  <Input
                    type="text"
                    placeholder="예: Windows, Chrome"
                    value={filters.product}
                    onChange={(e) => handleInputChange('product', e.target.value)}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="flex items-center gap-2 text-sm font-medium mb-2">
                    <Calendar className="w-4 h-4" />
                    시작 날짜
                  </label>
                  <Input
                    type="date"
                    value={filters.date_from}
                    onChange={(e) => handleInputChange('date_from', e.target.value)}
                  />
                </div>
                <div>
                  <label className="flex items-center gap-2 text-sm font-medium mb-2">
                    <Calendar className="w-4 h-4" />
                    종료 날짜
                  </label>
                  <Input
                    type="date"
                    value={filters.date_to}
                    onChange={(e) => handleInputChange('date_to', e.target.value)}
                  />
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="ransomware"
                  checked={filters.ransomware_only}
                  onChange={(e) => handleInputChange('ransomware_only', e.target.checked)}
                  className="rounded border-gray-300"
                />
                <label htmlFor="ransomware" className="text-sm font-medium">
                  랜섬웨어 관련 취약점만 보기
                </label>
              </div>
            </div>
          )}
        </form>
      </CardContent>
    </Card>
  );
}