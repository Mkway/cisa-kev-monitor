"""
취약점 관련 데이터베이스 모델
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, ForeignKey, Index
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID, JSONB
from datetime import datetime
import uuid

from app.models.base import Base

class Vendor(Base):
    """벤더/제조사 테이블"""
    __tablename__ = "vendors"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    name = Column(String(255), unique=True, nullable=False, index=True)
    normalized_name = Column(String(255), nullable=False, index=True)  # 검색용 정규화된 이름
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # 관계 설정
    products = relationship("Product", back_populates="vendor", cascade="all, delete-orphan")
    vulnerabilities = relationship("Vulnerability", back_populates="vendor")

    def __repr__(self):
        return f"<Vendor(name='{self.name}')>"

class Product(Base):
    """제품 테이블"""
    __tablename__ = "products"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    name = Column(String(255), nullable=False, index=True)
    normalized_name = Column(String(255), nullable=False, index=True)  # 검색용 정규화된 이름
    vendor_id = Column(UUID(as_uuid=True), ForeignKey("vendors.id"), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # 관계 설정
    vendor = relationship("Vendor", back_populates="products")
    vulnerabilities = relationship("Vulnerability", back_populates="product")
    
    # 복합 인덱스 (벤더별 제품명은 유니크)
    __table_args__ = (
        Index('idx_products_vendor_name', vendor_id, normalized_name, unique=True),
    )

    def __repr__(self):
        return f"<Product(name='{self.name}', vendor='{self.vendor.name if self.vendor else 'Unknown'}')>"

class Vulnerability(Base):
    """취약점 정보 테이블"""
    __tablename__ = "vulnerabilities"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # CISA KEV 기본 필드
    cve_id = Column(String(20), unique=True, nullable=False, index=True)  # CVE-2024-1234
    vendor_id = Column(UUID(as_uuid=True), ForeignKey("vendors.id"), nullable=False)
    product_id = Column(UUID(as_uuid=True), ForeignKey("products.id"), nullable=False)
    vulnerability_name = Column(String(500), nullable=False)
    date_added = Column(DateTime, nullable=False, index=True)
    short_description = Column(Text, nullable=False)
    required_action = Column(Text, nullable=False)
    due_date = Column(DateTime, nullable=True)
    known_ransomware_use = Column(Boolean, nullable=False, default=False, index=True)
    notes = Column(Text, nullable=True)
    
    # CWE 정보 (JSON 배열로 저장)
    cwe_ids = Column(JSONB, nullable=True)  # ["CWE-79", "CWE-89"]
    
    # 메타 정보
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    last_checked_at = Column(DateTime, default=datetime.utcnow, nullable=False)  # CISA에서 마지막 확인 시간
    
    # 추가 메타데이터 (JSON으로 저장)
    extra_metadata = Column(JSONB, nullable=True)  # 향후 확장용
    
    # 관계 설정
    vendor = relationship("Vendor", back_populates="vulnerabilities")
    product = relationship("Product", back_populates="vulnerabilities")
    
    # 인덱스 설정
    __table_args__ = (
        Index('idx_vulns_date_added_desc', date_added.desc()),
        Index('idx_vulns_vendor_product', vendor_id, product_id),
        Index('idx_vulns_ransomware_date', known_ransomware_use, date_added.desc()),
        Index('idx_vulns_cve_search', cve_id),
    )

    def __repr__(self):
        return f"<Vulnerability(cve_id='{self.cve_id}', name='{self.vulnerability_name[:50]}...')>"

class VulnerabilityHistory(Base):
    """취약점 변경 이력 테이블"""
    __tablename__ = "vulnerability_history"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    vulnerability_id = Column(UUID(as_uuid=True), ForeignKey("vulnerabilities.id", ondelete="CASCADE"), nullable=False)
    
    # 변경 정보
    action = Column(String(50), nullable=False, index=True)  # 'created', 'updated', 'deleted'
    changed_fields = Column(JSONB, nullable=True)  # 변경된 필드들
    old_values = Column(JSONB, nullable=True)  # 이전 값들
    new_values = Column(JSONB, nullable=True)  # 새로운 값들
    
    # 시간 정보
    timestamp = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    
    # 추가 정보
    source = Column(String(100), nullable=True)  # 'cisa_sync', 'manual_update' 등
    notes = Column(Text, nullable=True)

    __table_args__ = (
        Index('idx_vuln_history_timestamp', vulnerability_id, timestamp.desc()),
    )

class DataSyncStatus(Base):
    """데이터 동기화 상태 테이블"""
    __tablename__ = "data_sync_status"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    source = Column(String(100), nullable=False, unique=True)  # 'cisa_kev'
    last_sync_at = Column(DateTime, nullable=True)
    last_successful_sync_at = Column(DateTime, nullable=True)
    status = Column(String(50), nullable=False, default='pending')  # 'success', 'error', 'in_progress'
    error_message = Column(Text, nullable=True)
    total_records = Column(Integer, nullable=True)
    processed_records = Column(Integer, nullable=True)
    
    # 메타 정보
    sync_metadata = Column(JSONB, nullable=True)  # 추가 동기화 정보
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)