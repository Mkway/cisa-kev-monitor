"""
취약점 관련 Pydantic 스키마
"""

from pydantic import BaseModel, Field, ConfigDict
from typing import Optional, List, Dict, Any
from datetime import datetime
from uuid import UUID

class VendorBase(BaseModel):
    """벤더 기본 스키마"""
    name: str = Field(..., min_length=1, max_length=255, description="벤더명")

class VendorCreate(VendorBase):
    """벤더 생성 스키마"""
    pass

class VendorResponse(VendorBase):
    """벤더 응답 스키마"""
    model_config = ConfigDict(from_attributes=True)
    
    id: UUID
    normalized_name: str
    created_at: datetime
    updated_at: datetime

class ProductBase(BaseModel):
    """제품 기본 스키마"""
    name: str = Field(..., min_length=1, max_length=255, description="제품명")

class ProductCreate(ProductBase):
    """제품 생성 스키마"""
    vendor_id: UUID

class ProductResponse(ProductBase):
    """제품 응답 스키마"""
    model_config = ConfigDict(from_attributes=True)
    
    id: UUID
    normalized_name: str
    vendor_id: UUID
    vendor: Optional[VendorResponse] = None
    created_at: datetime
    updated_at: datetime

class VulnerabilityBase(BaseModel):
    """취약점 기본 스키마"""
    cve_id: str = Field(..., min_length=13, max_length=20, description="CVE ID")
    vulnerability_name: str = Field(..., min_length=1, max_length=500, description="취약점명")
    short_description: str = Field(..., min_length=1, description="간단한 설명")
    required_action: str = Field(..., min_length=1, description="필요한 조치")
    known_ransomware_use: bool = Field(default=False, description="랜섬웨어 사용 여부")
    due_date: Optional[datetime] = Field(None, description="조치 마감일")
    notes: Optional[str] = Field(None, description="참고사항")

class VulnerabilityCreate(VulnerabilityBase):
    """취약점 생성 스키마"""
    vendor_id: UUID
    product_id: UUID
    date_added: datetime
    cwe_ids: Optional[List[str]] = Field(None, description="CWE ID 목록")
    extra_metadata: Optional[Dict[str, Any]] = Field(None, description="추가 메타데이터")

class VulnerabilityUpdate(BaseModel):
    """취약점 업데이트 스키마"""
    vulnerability_name: Optional[str] = Field(None, min_length=1, max_length=500)
    short_description: Optional[str] = Field(None, min_length=1)
    required_action: Optional[str] = Field(None, min_length=1)
    known_ransomware_use: Optional[bool] = None
    due_date: Optional[datetime] = None
    notes: Optional[str] = None
    cwe_ids: Optional[List[str]] = None
    extra_metadata: Optional[Dict[str, Any]] = None

class VulnerabilityResponse(VulnerabilityBase):
    """취약점 응답 스키마"""
    model_config = ConfigDict(from_attributes=True)
    
    id: UUID
    vendor_id: UUID
    product_id: UUID
    date_added: datetime
    cwe_ids: Optional[List[str]] = None
    extra_metadata: Optional[Dict[str, Any]] = None
    created_at: datetime
    updated_at: datetime
    last_checked_at: datetime
    
    # 관계 데이터
    vendor: Optional[VendorResponse] = None
    product: Optional[ProductResponse] = None

class VulnerabilityListResponse(BaseModel):
    """취약점 목록 응답 스키마"""
    items: List[VulnerabilityResponse]
    total: int
    page: int
    per_page: int
    pages: int

class VulnerabilitySearchRequest(BaseModel):
    """취약점 검색 요청 스키마"""
    query: Optional[str] = Field(None, description="검색어")
    vendor: Optional[str] = Field(None, description="벤더명")
    product: Optional[str] = Field(None, description="제품명")
    cve_id: Optional[str] = Field(None, description="CVE ID")
    ransomware_only: Optional[bool] = Field(None, description="랜섬웨어 사용 취약점만")
    date_from: Optional[datetime] = Field(None, description="시작 날짜")
    date_to: Optional[datetime] = Field(None, description="종료 날짜")
    page: int = Field(1, ge=1, description="페이지 번호")
    per_page: int = Field(20, ge=1, le=100, description="페이지당 항목 수")

class VulnerabilityHistoryResponse(BaseModel):
    """취약점 이력 응답 스키마"""
    model_config = ConfigDict(from_attributes=True)
    
    id: UUID
    vulnerability_id: UUID
    action: str
    changed_fields: Optional[Dict[str, Any]] = None
    old_values: Optional[Dict[str, Any]] = None
    new_values: Optional[Dict[str, Any]] = None
    timestamp: datetime
    source: Optional[str] = None
    notes: Optional[str] = None

class DataSyncStatusResponse(BaseModel):
    """데이터 동기화 상태 응답 스키마"""
    model_config = ConfigDict(from_attributes=True)
    
    id: UUID
    source: str
    last_sync_at: Optional[datetime] = None
    last_successful_sync_at: Optional[datetime] = None
    status: str
    error_message: Optional[str] = None
    total_records: Optional[int] = None
    processed_records: Optional[int] = None
    extra_metadata: Optional[Dict[str, Any]] = None
    created_at: datetime
    updated_at: datetime

# CISA KEV API 응답 스키마 (외부 API용)
class CISAVulnerabilityRaw(BaseModel):
    """CISA KEV 원시 데이터 스키마"""
    cveID: str
    vendorProject: str
    product: str
    vulnerabilityName: str
    dateAdded: str
    shortDescription: str
    requiredAction: str
    dueDate: str
    knownRansomwareCampaignUse: str
    notes: str

class CISAKEVResponse(BaseModel):
    """CISA KEV API 응답 스키마"""
    title: str
    catalogVersion: str
    dateReleased: str
    count: int
    vulnerabilities: List[CISAVulnerabilityRaw]

# 통계 스키마
class VulnerabilityStats(BaseModel):
    """취약점 통계 스키마"""
    total_vulnerabilities: int
    total_vendors: int
    total_products: int
    ransomware_vulnerabilities: int
    recent_additions: int  # 최근 30일
    by_vendor: List[Dict[str, Any]]  # 벤더별 통계
    by_month: List[Dict[str, Any]]   # 월별 통계